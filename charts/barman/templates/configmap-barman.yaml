apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "barman.fullname" . }}-global-config
  labels:
    {{- include "barman.labels" . | nindent 4 }}
data:
  barman.conf: |
      ; Commented lines show the default values
      [barman]
      ; archiver = off
      backup_method = {{ .Values.barman.backupMethod }}
      ; backup_directory = %(barman_home)s/%(name)s

      backup_options = {{ .Values.barman.backupOptions }}

      ; This must be set to the BARMAN_DATA_DIR environment variable
      barman_home = {{ .Values.barman.backupDir }}

      barman_user = {{ .Values.barman.barmanUser }}

      {{- if hasKey .Values.barman "postBackupRetryScript" }}
      post_backup_retry_script = {{ .Values.barman.postBackupRetryScript }}
      {{- end }}

      {{- if hasKey .Values.barman "preRecoveryRetryScript" }}
      pre_recovery_retry_script = {{ .Values.barman.preRecoveryRetryScript }}
      {{- end }}

      ; barman_lock_directory = %(barman_home)s
      compression = {{ .Values.barman.compression }}
      configuration_files_directory = /etc/barman/barman.d
      last_backup_maximum_age = {{ .Values.barman.lastBackupMaximumAge }}
      minimum_redundancy = 1
      ;network_compression = true
      retention_policy = {{ .Values.barman.retentionPolicy }}
      ; retention_policy_mode = auto
      ;reuse_backup = link
      streaming_archiver = on
      ; wal_retention_policy = main

      ; use empty log_file for stderr output
      log_file = ""
      log_level = INFO
