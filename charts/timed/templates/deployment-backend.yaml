apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "timed.fullname" . }}-backend
  labels:
    {{- include "timed.labels" . | nindent 4 }}
    app.kubernetes.io/component: backend
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  replicas: {{ .Values.backend.replicaCount }}
  selector:
    matchLabels:
      {{- include "timed.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "timed.labels" . | nindent 8 }}
        app.kubernetes.io/component: backend
    spec:
      containers:
        - name: {{ .Chart.Name }}-backend
          image: "{{ .Values.backend.image.repository }}:{{ default .Chart.AppVersion .Values.backend.image.tag }}"
          env:
            - name: DJANGO_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "timed.postgresql.fullname" . }}
                  key: password
            - name: THIS_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: DJANGO_ALLOWED_HOSTS
              value: '{{ join "," .Values.ingress.hosts | default "localhost" }},$(THIS_POD_IP)'
          envFrom:
            - secretRef:
                name: {{ include "timed.fullname" . }}-backend
            - configMapRef:
                name: {{ include "timed.fullname" . }}-backend
          volumeMounts:
            - name: workreport
              mountPath: {{ .Values.backend.settings.workReportPath }}
              subPath: workreport
          imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.backend.service.internalPort }}
          {{- if .Values.backend.livenessProbe.enabled }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.backend.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.backend.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.backend.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.backend.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.backend.livenessProbe.failureThreshold }}
            httpGet:
              path: /admin/
              port: http
              httpHeaders:
                - name: Host
                  value: {{ mustFirst .Values.ingress.hosts | default "localhost" }}
          {{- end }}
          {{- if .Values.backend.readinessProbe.enabled }}
          readinessProbe:
            initialDelaySeconds: {{ .Values.backend.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.backend.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.backend.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.backend.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.backend.readinessProbe.failureThreshold }}
            httpGet:
              path: /admin/
              port: http
              httpHeaders:
                - name: Host
                  value: {{ mustFirst .Values.ingress.hosts | default "localhost" }}
          {{- end }}
          resources:
{{ toYaml .Values.backend.resources | indent 12 }}
    {{- if .Values.backend.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.backend.nodeSelector | indent 8 }}
    {{- end }}
      volumes:
        - name: workreport
          configMap:
            name: {{ include "timed.fullname" .}}-workreport
