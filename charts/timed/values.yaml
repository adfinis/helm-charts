# Default values for timed-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- override what version of Kubernetes to render against
kubeVersionOverride: ~

backend:
  # -- (int) Number of Backend replicas
  replicaCount: 1
  image:
    # -- Backend image name
    repository: ghcr.io/adfinis/timed-backend
    # -- Backend version.
    tag: v3.0.3
    # -- Backend image pull policy
    pullPolicy: IfNotPresent
  service:
    # -- Backend service name
    name: timed-backend
    # -- Backend service type
    type: ClusterIP
    # -- External Port of backend service
    externalPort: 80
    # -- Internal Port of backend service
    internalPort: 80
    # -- Internal Port of backend service probes
    probesPort: 81
  # -- Specify an existing secret that gets used instead of a Helm managed secret based on several values.
  existingSecret: ~
  # -- Resource limits for backend
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi
  postgresql:
    # -- Enable existing PostgreSQL instance for persistence
    postgresqlExistingHost: ""
    # --  You need to manually create the secret before deploying this (or use vault)
    # kubectl create secret generic --namespace=timed $(CHART-RELEASE-NAME)-postgresql --from-literal=password=$SECRET
    postgresqlExistingSecret: ""
    # -- PostgreSQL database name for existing instance
    postgresqlDatabase: timed
    # -- PostgreSQL user name for existing instance
    postgresqlUsername: timed
    # -- PostgreSQL Port for existing instance
    postgresqlPort: 5432

  startupProbe:
    # -- Enable startup probe on backend
    enabled: true
    # -- Number of times to perform the probe
    failureThreshold: 6

  livenessProbe:
    # -- Enable liveness probe on backend
    enabled: true
    # -- Number of seconds after the container has started before liveness probe is initiated
    initialDelaySeconds: 60
    # -- How often (in seconds) to perform the probe
    periodSeconds: 10
    # -- Number of seconds after which the probe times out
    timeoutSeconds: 5
    # -- Number of tries to perform the probe
    failureThreshold: 6
    # -- Minimum consecutive successes for the probe to be considered successful after having failed
    successThreshold: 1
  readinessProbe:
    # -- Enable readiness probe on backend
    enabled: true
    # -- How often (in seconds) to perform the probe
    periodSeconds: 10
    # -- Number of seconds after which the probe times out
    timeoutSeconds: 5
    # -- Number of tries to perform the probe
    failureThreshold: 6
    # -- Minimum consecutive successes for the probe to be considered successful after having failed
    successThreshold: 1
  settings:
    # django settings for backend
    # -- Connection string of SMTP server to send mails
    emailUrl: smtp://localhost:25
    # -- Default email address to use for various responses
    emailFrom: webmaster@chart-example.local
    # -- Email address error messages are sent from
    serverEmail: webmaster@chart-example.local
    # -- TLS option for email server
    emailUseTls: "True"
    # -- Path where the workreport shall be loaded from. The contents of the default path is filled from `configmap-workreport.yaml`.
    workReportPath: /etc/workreport
    # -- Number of fields that are sent when saving changes on a model.
    maxNumberFields: 2000
    # -- Email address to use for sending order confirmations from customer center
    customerCenterEmail: "webmaster@chart-example.local"
    # -- Django administrators, example: Jon Doe <jon.doe@example.com>
    admins: []
    # -- Define allowed domains for CORS
    corsAllowedOrigins: []
    # -- Define name for build projects
    buildProject: " BUILD"
    hurricane:
      # -- request queue length before hurricane denies requests and toggles readiness
      reqQueueLen: 250
    sentry:
      # -- Enable Sentry integration
      enabled: false
      # -- Sentry DSN for error reporting. Set to enable Sentry integration
      dsn: ~
      # -- Sentry trace sample rate, Set 1.0 to capture 100% of transactions
      tracesSampleRate: 1.0
      # -- Associate users to errors in Sentry
      sendDefaultPii: "True"

  jobs:
    dbmigrate:
      # -- Enable the dbmigrate Job. This is configurable because timed can also run this on startup if so preferred.
      enable: true

  cronjobs:
    # -- Notify supervisors
    notifySupervisors:
      schedule: "0 8 * * 4"
      command:
        - "./manage.py"
        - "notify_supervisors_shorttime"
    # -- Notify reviewers first stage
    notifyReviewersFirst:
      schedule: "0 8 4 * *"
      command:
        - "./manage.py"
        - "notify_reviewers_unverified"
        - "--offset"
        # -- Period will end today minus given offset
        - "5"
    # -- Notify reviewers second stage
    notifyReviewersSecond:
      schedule: "0 8 11 * *"
      command:
        - "./manage.py"
        - "notify_reviewers_unverified"
        - "--offset"
        # -- Period will end today minus given offset
        - "12"
        - "--message"
        # -- Additional message to send if there are unverified reports
        - "'Please verify your reports.'"
    # -- Notify reviewers third stage
    notifyReviewersThird:
      schedule: "0 8 18 * *"
      command:
        - "./manage.py"
        - "notify_reviewers_unverified"
        - "--offset"
        # -- Period will end today minus given offset
        - "19"
        - "--message"
        # -- Additional message to send if there are unverified reports
        - "'Please verify your reports immediately!'"
    # -- Redmine report
    redmineReport:
      schedule: "0 1 * * 1"
      command:
        - "./manage.py"
        - "redmine_report"
    # -- Notify changed employments
    notifyChangedEmployments:
      schedule: "0 2 * * 1"
      command:
        - "./manage.py"
        - "notify_changed_employments"
    # -- Budget Check
    budgetCheck:
      schedule: "0 3 * * *"
      command:
        - "./manage.py"
        - "budget_check"
    # -- Update project expanditure in redmine first time
    updateProjectExpanditureFirst:
      schedule: "0 8 * * 3"
      command:
        - "./manage.py"
        - "update_project_expenditure"
        # -- Pretend to update the project expenditure
        - "--pretend"
    # -- Update project expanditure in redmine second time
    updateProjectExpanditureSecond:
      schedule: "0 8 * * 0"
      command:
        - "./manage.py"
        - "update_project_expenditure"
        # -- Pretend to update the project expenditure
        - "--pretend"

frontend:
  # -- (int) Number of Backend replicas
  replicaCount: 1
  image:
    # -- Frontend image name
    repository: ghcr.io/adfinis/timed-frontend
    # -- Frontend image pull policy
    pullPolicy: IfNotPresent
    # -- Frontend version.
    tag: v3.1.0
  service:
    # -- Frontend service name
    name: timed-frontend
    # -- Frontend service type
    type: ClusterIP
    # -- External Port of frontend service
    externalPort: 80
    # -- Internal Port of frontend service
    internalPort: 80
  # -- Resource limits for frontend
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi
  livenessProbe:
    # -- Enable liveness probe on frontend
    enabled: true
    # -- Number of seconds after the container has started before liveness probe is initiated
    initialDelaySeconds: 60
    # -- How often (in seconds) to perform the probe
    periodSeconds: 10
    # -- Number of seconds after which the probe times out
    timeoutSeconds: 5
    # -- Number of tries to perform the probe
    failureThreshold: 6
    # -- Minimum consecutive successes for the probe to be considered successful after having failed
    successThreshold: 1
  readinessProbe:
    # -- Enable readiness probe on frontend
    enabled: true
    # -- Number of seconds after the container has started before readiness probe is initiated
    initialDelaySeconds: 30
    # -- How often (in seconds) to perform the probe
    periodSeconds: 10
    # -- Number of seconds after which the probe times out
    timeoutSeconds: 5
    # -- Number of tries to perform the probe
    failureThreshold: 6
    # -- Minimum consecutive successes for the probe to be considered successful after having failed
    successThreshold: 1

ingress:
  # -- Enable ingress for timed
  enabled: false
  # -- Ingress annotations
  annotations: {}
    # kubernetes.io/tls-acme: "true"
  # -- Set ingressClassName
  ingressClassName: ~
  # -- Ingress hostnames
  hosts: []
  #  - timed-test.example.com
  # -- Ingress TLS options
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - timed-test.example.com

postgresql:
  # -- Enable PostgreSQL Helm Chart (https://bitnami.com/stack/postgresql) for persistence
  enabled: true
  auth:
    # -- PostgreSQL database name
    database: timed
    # -- PostgreSQL user name
    username: timed
    # -- Set a password for PostgreSQL
    # password: s3cr3t
  ingress:
    # -- Enable ingress
    enabled: false
    # -- Whitelist specific IP ranges
    loadBalancerSourceRanges: []
    # -- Service selector labels
    selector:
      app.kubernetes.io/name: postgresql
      role: slave
  service:
    port: 5432
  tls:
    # -- Enable TLS for Postgresql
    enabled: false
    # -- Name of TLS secret
    certificatesSecret: psql-server
    # -- Cert file name
    certFilename: "tls.crt"
    # -- Cert key filename
    certKeyFilename: "tls.key"
    certificate:
      # -- Name of certificate
      name: psql-server
      # -- DNS names of certificate
      dnsNames: []
      # -- Issuer ref
      # @default -- cert-manager
      issuerRef:
        group: cert-manager.io
        kind: ClusterIssuer
        name: letsencrypt-prod

auth:
  # -- Allow local Django login
  allowLocalLogin: "False"
  oidc:
    # -- OIDC host
    url: https://example.com/auth/realms/timed/protocol/openid-connect
    endPoints:
      # -- OIDC /auth endpoint
      auth: ~
      # -- OIDC /token endpoint
      token: ~
      # -- OIDC /userinfo endpoint
      userInfo: ~
      # -- OIDC /certs endpoint
      jwks: ~

    # -- OIDC create user in timed db if it does not already exist
    createUser: "False"
    # -- URL of the django-admin, to which the user is redirected after successful admin login
    adminLoginRedirectUrl: https://example.com/admin/
    client:
      # -- OIDC client id
      id: timed
    # -- Algorithm the OIDC provider uses to sign ID tokens
    signAlgorithm: RS256
    # -- OIDC verify SSL
    verifySSL: "True"
    introspect:
      # -- Enable OIDC introspect
      enabled: true
      client:
        # -- OIDC introspect client id
        id: timed-confidential
        # -- OIDC introspect client secret
        secret: ""
      # -- OIDC introspect endpoint
      endpoint: ~
    claims:
      # -- OIDC firstname claim name
      firstname: given_name
      # -- OIDC lastname claim name
      lastname: family_name
      # -- OIDC username claim name
      username: preferred_username
      # -- OIDC email claim name
      email: email

redmine:
  # -- Enable Redmine integration
  enabled: false
  # -- Redmine URL
  url: redmine.example.com
  # -- Redmine API Key
  apiKey: ""
  # -- Redmine build project
  buildProject: "build"
  # -- Spent hours field id on Redmine
  spenthoursField: 0
  # -- Amount offered field id on Redmine
  amountOfferedField: 1
  # -- Amount invoiced field id on Redmine
  amountInvoicedField: 2

prometheus:
  # -- Enable Prometheus integration
  enabled: false
  # -- Labels to add to all Prometheus integration resources
  extraLabels: {}
  podMonitor:
    # -- Enable creation of a PodMonitor CRD
    enabled: true
    # -- Interval at which metrics should be scraped
    interval: "30s"
    # -- MetricRelabelConfigs to apply to samples before ingestion
    metricRelabelings: []
    # -- RelabelConfigs to apply to samples before scraping
    relabelings: []

# Configure if timed should be deployed with Grafana templates
grafana:
  # -- Enable Grafana Dashboards
  enabled: false
  # -- Add a default `grafana_dashboard: 1` label
  defaultLabel: true
  # -- Labels to add to all Grafana integration resources
  extraLabels: {}
